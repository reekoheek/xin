(window.webpackJsonp=window.webpackJsonp||[]).push([[1,10],{28:function(t,i,e){"use strict";e.r(i);var s=e(9),n=e(48);Object(s.b)("x-binding",class extends n.View{get template(){return e(42)}get props(){return Object.assign({},super.props,{foo:{type:String,value:""}})}})},42:function(t,i){t.exports='<div class="padding container"> <h2>Binding</h2> <p>Data binding connects data from a web component to a property or attribute of an element.</p> <p>Example,</p> <code><pre>\n&lt;div&gt;Input&lt;/div&gt;\n&lt;input type="text" id="input" value="{{foo}}"&gt;\n\n&lt;div&gt;Readonly&lt;/div&gt;\n&lt;input type="text" id="inputRo" value="[[foo]]"&gt;\n\n&lt;div id="result"&gt;[[foo]]&lt;/div&gt;</pre></code> <p>It will bind #input value to foo property of parent and update data to #result</p> <div class=card> <div> <p>Input</p> <input id=input type=text value={{foo}}> </div> <div> <p>Readonly Input</p> <input id=inputRo type=text value=[[foo]]> </div> <div> <p>Result</p> <span id=result>[[foo]]</span> </div> </div> <h3>Concept</h3> <ul> <li>Binding to properties</li> <li>Get set methods</li> <li>Push splice methods</li> <li>Listeners</li> </ul> </div> '},48:function(t,i,e){"use strict";e.r(i);var s=e(8),n=e(0);class o extends s.a{get props(){const t=this.__repository.get("view.transitionIn")||this.__repository.get("view.transition")||"slide",i=this.__repository.get("view.transitionOut")||this.__repository.get("view.transition")||"fade";return Object.assign({},super.props,{uri:{type:String,required:!0},transitionIn:{type:String,value:t},transitionOut:{type:String,value:i},title:{type:String,value:()=>`View ${this.uri}`}})}focusing(){}focused(){}blurred(){}created(){super.created(),this.classList.add("xin-view")}ready(){super.ready(),this.inFx=new n.a({element:this,transition:this.transitionIn,method:"in"}),this.outFx=new n.a({element:this,transition:this.transitionOut,method:"out"})}attached(){super.attached(),this.classList.remove("xin-view--focus"),this.classList.remove("xin-view--visible"),this.__app?(this.__app.route(this.uri,t=>{this.focus(t)}),this.fire("routed")):console.error("Cannot route view to undefined app")}async focus(t={}){this.set("parameters",t),await this.focusing(t),this.fire("focusing",t),this.async(()=>{"setFocus"in this.parentElement?this.parentElement.setFocus(this):(this.setVisible(!0),this.setFocus(!0))})}setVisible(t){if(t)return this.classList.add("xin-view--visible"),void this.fire("show",{view:this});this.classList.remove("xin-view--visible"),this.querySelectorAll(".xin-view.xin-view--visible").forEach(i=>i.setVisible(t)),this.fire("hide",{view:this})}async setFocus(t){if(t)return this.classList.add("xin-view--focus"),await this.focused(),void this.fire("focus",{view:this});this.classList.remove("xin-view--focus"),this.querySelectorAll(".xin-view.xin-view--focus").forEach(i=>{"setFocus"in i.parentElement?i.parentElement.setFocus(null):i.setFocus(t)}),await this.blurred(),this.fire("blur",{view:this})}}Object(s.c)("xin-view",o),e.d(i,"View",function(){return o})}}]);