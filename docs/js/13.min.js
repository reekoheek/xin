(window.webpackJsonp=window.webpackJsonp||[]).push([[13],{45:function(e,t){e.exports='<div class="padding container"> <h2>Intro</h2> <p> Xin is Single Page Application framework using javascript. Xin powered by beloved opensource projects and specs, </p> <ul> <li>New spec of Javascript (ES6+)</li> <li>NPM / Yarn</li> <li>Webpack</li> </ul> <h3>Getting started</h3> <p>For quick start you can use template provided by community. Just download or clone web example that already use xin from `https://github.com/reekoheek/xin-example`.</p> <code><pre>\nwget https://github.com/reekoheek/xin-example/archive/master.zip\nunzip master.zip\ncd xin-example-master\nnpm i\nnpm run dev</pre></code> <p>Any help to compose yo generator accepted. ;)</p> <h3>Selectors</h3> <p>You can select element by id inside component context using component.$</p> <code><pre>\n&lt;my-component id="myComponent"&gt;\n  &lt;template&gt;\n    &lt;input type="text" id="foo"&gt;\n    &lt;input type="text" id="bar"&gt;\n  &lt;/template&gt;\n&lt;/my-component&gt;</pre></code> <code><pre>\nlet compFoo = myComponent.$.foo;\n\nassert(compFoo === document.getElementById(\'foo\'));</pre></code> <p>You can select element by css selector inside component context using component.$$()</p> <code><pre>\n&lt;my-component id="myComponent"&gt;\n  &lt;template&gt;\n    &lt;input type="text"&gt;\n    &lt;input type="button"&gt;\n  &lt;/template&gt;\n&lt;/my-component&gt;</pre></code> <code><pre>\nlet textInput = myComponent.$$(\'input[type=text]\');\nlet button = myComponent.$$(\'input[type=button]\');</pre></code> </div> '}}]);