(window.webpackJsonp=window.webpackJsonp||[]).push([[10],{43:function(e,n){e.exports="<div class=\"padding container\"> <h2>Component</h2> <p> Let say we want to create new component named `foo-bar`. The component will be used inside web page as follows: </p> <code><pre>\n&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;body&gt;\n  &lt;foo-bar name=\"Ali\"&gt;&lt;/foo-bar&gt;\n&lt;/body&gt;\n&lt;/html&gt;</pre></code> <p> Which will produce page as follows: </p> <code><pre>\nFoobar: Hello Ali</pre></code> <p> Write lines below to new file named `foo-bar.js`. </p> <code><pre>\nimport { define, Component } from '@xinix/xin';\n\n// create new component class extend from Component\nclass FooBar extends Component {\n  get template () {\n    return `Foobar: Hello &lt;span&gt;{{name}}&lt;/span&gt;`;\n  }\n\n  get props () {\n    return Object.assign({}, super.props, {\n      name: {\n        type: String,\n        value: 'Great Programmer',\n      },\n    });\n  }\n}\n\n// define component class as foo-bar tag in html.\ndefine('foo-bar', FooBar);</pre></code> <h3> System Properties </h3> <p> Components can access several default system properties: </p> <ul> <li>component.__app</li> <li>component.__global</li> <li>component.__setup</li> </ul> <h3> Put reference to model </h3> <code><pre>\n&lt;foo-container id=\"container\"&gt;\n  &lt;template&gt;\n    &lt;foo-object id=\"theFoo\" ref=\"foo\"&gt;&lt;/foo-object&gt;\n  &lt;/template&gt;\n&lt;/foo-container&gt;</pre></code> <code><pre>\nlet container = document.getElementById('container');\n\nif (container.foo === document.getElementById('theFoo')) {\n  console.log('Reference OK');\n}</pre></code> <h3>Misc</h3> <ul> <li>.sprintf()</li> </ul> </div> "}}]);